<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <groupId>com.felixalacampagne</groupId>
   <artifactId>xmltransform</artifactId>
   <version>0.17.7.6-SNAPSHOT</version>
   <packaging>jar</packaging>
   <name>xmltransform</name>
   <description>Perform enhanced XSLT transforms</description>

   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <java.version>17</java.version>
      <maven.compiler.target>${java.version}</maven.compiler.target>
      <maven.compiler.source>${java.version}</maven.compiler.source>      
   </properties>

   <build>
      <!-- sourceDirectory>src</sourceDirectory -->
      <!-- Force inclusion of the logback.xml file as a source file so it is included in the executable HTMLMaker.jar.
      Note it must be explicitly excluded when building the xmltransform jar. There is no practical way
      to include additional non-source files in HTMLMaker.jar - it might be possible but the maven-assembly-plugin
      documentation is incomprehensible, so the solution is to get the file included as a source file and then
      exclude it when building the artifact used by other projects, since the documentation for maven-jar-plugin
      makes more sense.
      -->
      <!-- resources>
      <resource>
      <directory>resources</directory>
      </resource>
   </resources -->
   
   <plugins>
         <!-- Stupidly the maven build timestamp does not use the local timezone and there is no
              way to tell it to do so. Google provided a solution which somehow uses build.localtime
              but for me that just gives a value of 'build.localtime' instead of the timestamp.
              The build-helper-maven-plugin is used below to set a variable to the time of the build using
              a timezone but unfortunately the zone must be hard coded instead of just using the
              locally configured timezone.
          -->      
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>1.9.1</version>
            <executions>
                <execution>
                    <id>timestamp-property</id>
                    <goals>
                        <goal>timestamp-property</goal>
                    </goals>
                    <configuration>
                        <name>localtime</name>
                        <pattern>yyyy-MM-dd HH:mm</pattern>
                        <timeZone>Europe/Brussels</timeZone>
                    </configuration>
                </execution>
            </executions>
        </plugin>      
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>templating-maven-plugin</artifactId>
            <version>1.0.0</version>
            <executions>
                <execution>
                    <id>filtering-java-templates</id>
                    <goals>
                        <goal>filter-sources</goal>
                    </goals>
                <configuration>              
                  <!-- sourceDirectory: defaults to ${basedir}/src/main/java-templates -->
                  <!-- outputDirectory>${project.build.directory}/generated-sources/java-templates</outputDirectory -->
                </configuration>                    
                </execution>
            </executions>
        </plugin>
      
      <!-- plugin>
         <artifactId>maven-compiler-plugin</artifactId>
         <version>3.8.1</version>
         <configuration>
            <source>17</source>
            <target>17</target>
         </configuration>
      </plugin -->
      <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
         <version>2.6</version>
         <configuration>
            <skipIfEmpty>true</skipIfEmpty>
            <!-- don't want a logback.xml in xmltransform to interfere with dependents logback configs -->
            <excludes>
               <exclude>logback.xml</exclude>
            </excludes>
         </configuration>
      </plugin>

      <!-- This generates HTMLMaker.jar as an 'executable' a jar in addition to the xmltransform jar used by pagebuilderrest
      Unfortunately it seems that it also 'installs' the combined HTMLMaker.jar as 'xmltransform-0.17.3-SNAPSHOT.jar'
      in the local maven repository with the result that HTMLMaker.jar is used by the pagebuilderrest project
      instead of the xmltransform-0.17.3-SNAPSHOT.jar which appears in the target directly. This may be what has
      caused me so much hassle trying to get logging to work.

      Fork only knows how I'm going to fix this since the whole thing is black magic and the document as such
      is incomprehensible.
      
      Ugh! Just now realised that excluding logback.xml from the xmltransform.jar creation above is causing
      logback.xml to be absent from the HTMLMaker.jar built below!
      -->
      <plugin>
         <artifactId>maven-assembly-plugin</artifactId>

         <!-- This magic means the combined jar is built as part of the
         normal 'clean install' build of the parent project (see FLACtagger pom.xml for more details).

         The original project was used to produce a number of slightly different variations of the app
         which allowed double click invocation in the appropriate mode, eg. QR of clipboard, QR EPC of
         account information on the clipboard, GUI to enter transaction details and show QR.
         Rather than mess with sub-projects etc. I just want to generate all variations each time
         a build is performed. This is acheived by using multiple execution blocks with the different
         configurations required for each app. According to the internet this is highly frowned upon
         however it seems to work like a charm!!
         -->
         <executions>
            <execution>
               <id>make-HTMLMaker</id>
               <phase>package</phase>
               <goals><goal>single</goal></goals>
               <configuration>
                  <appendAssemblyId>false</appendAssemblyId>
                  <descriptorRefs>
                     <descriptorRef>jar-with-dependencies</descriptorRef>
                  </descriptorRefs>
                  <archive>
                     <manifest>
                        <mainClass>com.scu.xmltv.HTMLMaker</mainClass>
                     </manifest>
                  </archive>
                  <outputDirectory>${project.basedir}</outputDirectory>
                  <finalName>HTMLMaker</finalName>
                  <attach>false</attach> <!-- hopefully this mean do not install htmlmaker as 'xmltransform-0.17.3-SNAPSHOT.jar -->
               </configuration>
            </execution>
         </executions>
      </plugin>
   </plugins>
</build>
<dependencies>
   <dependency>
      <groupId>xalan</groupId>
      <artifactId>xalan</artifactId>
      <version>2.7.2</version>
      <!-- xalan -> serializer -> xml-apis
      xml-apis contains org.w3c.dom packages which are now included in Java 17 java.xml.
      eclipse fails if package is defined in more than one Jar with no way to disable the check.
      eventually stumbled on the 'exclusions' option which stops xml-apis being
      referenced by maven which means eclipse is happy.
      -->
      <exclusions>
         <exclusion>
            <groupId>xml-apis</groupId>
            <artifactId>xml-apis</artifactId>
         </exclusion>
      </exclusions>
   </dependency>
   <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.9.8</version>
   </dependency>
   <!-- logback dependencies. Not sure if alll need to be specified but logging in tomcat
   did not work until all three were present in the webapp pom.xml
   -->
   <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
   <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>2.0.7</version>
   </dependency>
   <!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-core -->
   <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>1.4.8</version>
   </dependency>
   <!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
   <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.4.8</version>
   </dependency>
   <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.9.2</version>
      <scope>test</scope>
   </dependency>
   <dependency>
       <groupId>org.apache.commons</groupId>
       <artifactId>commons-lang3</artifactId>
       <version>3.13.0</version>
   </dependency>   
</dependencies>
</project>
